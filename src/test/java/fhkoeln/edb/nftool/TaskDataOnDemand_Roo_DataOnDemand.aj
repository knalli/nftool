// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package fhkoeln.edb.nftool;

import fhkoeln.edb.nftool.ExerciseDataOnDemand;
import fhkoeln.edb.nftool.Task;
import java.util.List;
import java.util.Random;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

privileged aspect TaskDataOnDemand_Roo_DataOnDemand {
    
    declare @type: TaskDataOnDemand: @Component;
    
    private Random TaskDataOnDemand.rnd = new java.security.SecureRandom();
    
    private List<Task> TaskDataOnDemand.data;
    
    @Autowired
    private ExerciseDataOnDemand TaskDataOnDemand.exerciseDataOnDemand;
    
    public Task TaskDataOnDemand.getNewTransientTask(int index) {
        fhkoeln.edb.nftool.Task obj = new fhkoeln.edb.nftool.Task();
        obj.setOrdering(new Integer(index).shortValue());
        obj.setState(fhkoeln.edb.nftool.ExerciseState.class.getEnumConstants()[0]);
        obj.setExercise(exerciseDataOnDemand.getRandomExercise());
        return obj;
    }
    
    public Task TaskDataOnDemand.getSpecificTask(int index) {
        init();
        if (index < 0) index = 0;
        if (index > (data.size() - 1)) index = data.size() - 1;
        Task obj = data.get(index);
        return Task.findTask(obj.getId());
    }
    
    public Task TaskDataOnDemand.getRandomTask() {
        init();
        Task obj = data.get(rnd.nextInt(data.size()));
        return Task.findTask(obj.getId());
    }
    
    public boolean TaskDataOnDemand.modifyTask(Task obj) {
        return false;
    }
    
    public void TaskDataOnDemand.init() {
        data = fhkoeln.edb.nftool.Task.findTaskEntries(0, 10);
        if (data == null) throw new IllegalStateException("Find entries implementation for 'Task' illegally returned null");
        if (!data.isEmpty()) {
            return;
        }
        
        data = new java.util.ArrayList<fhkoeln.edb.nftool.Task>();
        for (int i = 0; i < 10; i++) {
            fhkoeln.edb.nftool.Task obj = getNewTransientTask(i);
            obj.persist();
            obj.flush();
            data.add(obj);
        }
    }
    
}
