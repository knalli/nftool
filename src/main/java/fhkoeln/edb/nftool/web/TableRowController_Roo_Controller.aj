// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package fhkoeln.edb.nftool.web;

import fhkoeln.edb.nftool.TableRow;
import java.io.UnsupportedEncodingException;
import java.lang.Integer;
import java.lang.Long;
import java.lang.Object;
import java.lang.String;
import java.util.Collection;
import javax.servlet.http.HttpServletRequest;
import javax.validation.Valid;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.util.UriUtils;
import org.springframework.web.util.WebUtils;

privileged aspect TableRowController_Roo_Controller {
    
    @RequestMapping(method = RequestMethod.POST)
    public String TableRowController.create(@Valid TableRow tableRow, BindingResult bindingResult, Model uiModel, HttpServletRequest httpServletRequest) {
        if (bindingResult.hasErrors()) {
            uiModel.addAttribute("tableRow", tableRow);
            return "tablerows/create";
        }
        uiModel.asMap().clear();
        tableRow.persist();
        return "redirect:/tablerows/" + encodeUrlPathSegment(tableRow.getId().toString(), httpServletRequest);
    }
    
    @RequestMapping(params = "form", method = RequestMethod.GET)
    public String TableRowController.createForm(Model uiModel) {
        uiModel.addAttribute("tableRow", new TableRow());
        return "tablerows/create";
    }
    
    @RequestMapping(value = "/{id}", method = RequestMethod.GET)
    public String TableRowController.show(@PathVariable("id") Long id, Model uiModel) {
        uiModel.addAttribute("tablerow", TableRow.findTableRow(id));
        uiModel.addAttribute("itemId", id);
        return "tablerows/show";
    }
    
    @RequestMapping(method = RequestMethod.GET)
    public String TableRowController.list(@RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, Model uiModel) {
        if (page != null || size != null) {
            int sizeNo = size == null ? 10 : size.intValue();
            uiModel.addAttribute("tablerows", TableRow.findTableRowEntries(page == null ? 0 : (page.intValue() - 1) * sizeNo, sizeNo));
            float nrOfPages = (float) TableRow.countTableRows() / sizeNo;
            uiModel.addAttribute("maxPages", (int) ((nrOfPages > (int) nrOfPages || nrOfPages == 0.0) ? nrOfPages + 1 : nrOfPages));
        } else {
            uiModel.addAttribute("tablerows", TableRow.findAllTableRows());
        }
        return "tablerows/list";
    }
    
    @RequestMapping(method = RequestMethod.PUT)
    public String TableRowController.update(@Valid TableRow tableRow, BindingResult bindingResult, Model uiModel, HttpServletRequest httpServletRequest) {
        if (bindingResult.hasErrors()) {
            uiModel.addAttribute("tableRow", tableRow);
            return "tablerows/update";
        }
        uiModel.asMap().clear();
        tableRow.merge();
        return "redirect:/tablerows/" + encodeUrlPathSegment(tableRow.getId().toString(), httpServletRequest);
    }
    
    @RequestMapping(value = "/{id}", params = "form", method = RequestMethod.GET)
    public String TableRowController.updateForm(@PathVariable("id") Long id, Model uiModel) {
        uiModel.addAttribute("tableRow", TableRow.findTableRow(id));
        return "tablerows/update";
    }
    
    @RequestMapping(value = "/{id}", method = RequestMethod.DELETE)
    public String TableRowController.delete(@PathVariable("id") Long id, @RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, Model uiModel) {
        TableRow.findTableRow(id).remove();
        uiModel.asMap().clear();
        uiModel.addAttribute("page", (page == null) ? "1" : page.toString());
        uiModel.addAttribute("size", (size == null) ? "10" : size.toString());
        return "redirect:/tablerows";
    }
    
    @ModelAttribute("tablerows")
    public Collection<TableRow> TableRowController.populateTableRows() {
        return TableRow.findAllTableRows();
    }
    
    @RequestMapping(value = "/{id}", method = RequestMethod.GET, headers = "Accept=application/json")
    @ResponseBody
    public Object TableRowController.showJson(@PathVariable("id") Long id) {
        TableRow tablerow = TableRow.findTableRow(id);
        if (tablerow == null) {
            return new ResponseEntity<String>(HttpStatus.NOT_FOUND);
        }
        return tablerow.toJson();
    }
    
    @RequestMapping(headers = "Accept=application/json")
    @ResponseBody
    public String TableRowController.listJson() {
        return TableRow.toJsonArray(TableRow.findAllTableRows());
    }
    
    @RequestMapping(method = RequestMethod.POST, headers = "Accept=application/json")
    public org.springframework.http.ResponseEntity<String> TableRowController.createFromJson(@RequestBody String json) {
        TableRow.fromJsonToTableRow(json).persist();
        return new ResponseEntity<String>(HttpStatus.CREATED);
    }
    
    @RequestMapping(value = "/jsonArray", method = RequestMethod.POST, headers = "Accept=application/json")
    public org.springframework.http.ResponseEntity<String> TableRowController.createFromJsonArray(@RequestBody String json) {
        for (TableRow tableRow: TableRow.fromJsonArrayToTableRows(json)) {
            tableRow.persist();
        }
        return new ResponseEntity<String>(HttpStatus.CREATED);
    }
    
    @RequestMapping(method = RequestMethod.PUT, headers = "Accept=application/json")
    public org.springframework.http.ResponseEntity<String> TableRowController.updateFromJson(@RequestBody String json) {
        if (TableRow.fromJsonToTableRow(json).merge() == null) {
            return new ResponseEntity<String>(HttpStatus.NOT_FOUND);
        }
        return new ResponseEntity<String>(HttpStatus.OK);
    }
    
    @RequestMapping(value = "/jsonArray", method = RequestMethod.PUT, headers = "Accept=application/json")
    public org.springframework.http.ResponseEntity<String> TableRowController.updateFromJsonArray(@RequestBody String json) {
        for (TableRow tableRow: TableRow.fromJsonArrayToTableRows(json)) {
            if (tableRow.merge() == null) {
                return new ResponseEntity<String>(HttpStatus.NOT_FOUND);
            }
        }
        return new ResponseEntity<String>(HttpStatus.OK);
    }
    
    @RequestMapping(value = "/{id}", method = RequestMethod.DELETE, headers = "Accept=application/json")
    public org.springframework.http.ResponseEntity<String> TableRowController.deleteFromJson(@PathVariable("id") Long id) {
        TableRow tablerow = TableRow.findTableRow(id);
        if (tablerow == null) {
            return new ResponseEntity<String>(HttpStatus.NOT_FOUND);
        }
        tablerow.remove();
        return new ResponseEntity<String>(HttpStatus.OK);
    }
    
    String TableRowController.encodeUrlPathSegment(String pathSegment, HttpServletRequest httpServletRequest) {
        String enc = httpServletRequest.getCharacterEncoding();
        if (enc == null) {
            enc = WebUtils.DEFAULT_CHARACTER_ENCODING;
        }
        try {
            pathSegment = UriUtils.encodePathSegment(pathSegment, enc);
        }
        catch (UnsupportedEncodingException uee) {}
        return pathSegment;
    }
    
}
