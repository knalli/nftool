// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package fhkoeln.edb.nftool.web;

import fhkoeln.edb.nftool.Exercise;
import fhkoeln.edb.nftool.ExerciseState;
import fhkoeln.edb.nftool.Task;
import fhkoeln.edb.nftool.TaskTable;
import java.io.UnsupportedEncodingException;
import java.lang.Integer;
import java.lang.Long;
import java.lang.Object;
import java.lang.String;
import java.util.Arrays;
import java.util.Collection;
import javax.servlet.http.HttpServletRequest;
import javax.validation.Valid;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.ui.Model;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.util.UriUtils;
import org.springframework.web.util.WebUtils;

privileged aspect TaskController_Roo_Controller {
    
    @RequestMapping(method = RequestMethod.POST)
    public String TaskController.create(@Valid Task task, BindingResult bindingResult, Model uiModel, HttpServletRequest httpServletRequest) {
        if (bindingResult.hasErrors()) {
            uiModel.addAttribute("task", task);
            return "tasks/create";
        }
        uiModel.asMap().clear();
        task.persist();
        return "redirect:/tasks/" + encodeUrlPathSegment(task.getId().toString(), httpServletRequest);
    }
    
    @RequestMapping(params = "form", method = RequestMethod.GET)
    public String TaskController.createForm(Model uiModel) {
        uiModel.addAttribute("task", new Task());
        return "tasks/create";
    }
    
    @RequestMapping(value = "/{id}", method = RequestMethod.DELETE)
    public String TaskController.delete(@PathVariable("id") Long id, @RequestParam(value = "page", required = false) Integer page, @RequestParam(value = "size", required = false) Integer size, Model uiModel) {
        Task.findTask(id).remove();
        uiModel.asMap().clear();
        uiModel.addAttribute("page", (page == null) ? "1" : page.toString());
        uiModel.addAttribute("size", (size == null) ? "10" : size.toString());
        return "redirect:/tasks";
    }
    
    @RequestMapping(params = { "find=ByExerciseAndState", "form" }, method = RequestMethod.GET)
    public String TaskController.findTasksByExerciseAndStateForm(Model uiModel) {
        uiModel.addAttribute("exercises", Exercise.findAllExercises());
        uiModel.addAttribute("exercisestates", java.util.Arrays.asList(ExerciseState.class.getEnumConstants()));
        return "tasks/findTasksByExerciseAndState";
    }
    
    @RequestMapping(params = "find=ByExerciseAndState", method = RequestMethod.GET)
    public String TaskController.findTasksByExerciseAndState(@RequestParam("exercise") Exercise exercise, @RequestParam("state") ExerciseState state, Model uiModel) {
        uiModel.addAttribute("tasks", Task.findTasksByExerciseAndState(exercise, state).getResultList());
        return "tasks/list";
    }
    
    @RequestMapping(params = { "find=ByState", "form" }, method = RequestMethod.GET)
    public String TaskController.findTasksByStateForm(Model uiModel) {
        uiModel.addAttribute("exercisestates", java.util.Arrays.asList(ExerciseState.class.getEnumConstants()));
        return "tasks/findTasksByState";
    }
    
    @RequestMapping(params = "find=ByState", method = RequestMethod.GET)
    public String TaskController.findTasksByState(@RequestParam("state") ExerciseState state, Model uiModel) {
        uiModel.addAttribute("tasks", Task.findTasksByState(state).getResultList());
        return "tasks/list";
    }
    
    @ModelAttribute("exercises")
    public Collection<Exercise> TaskController.populateExercises() {
        return Exercise.findAllExercises();
    }
    
    @ModelAttribute("exercisestates")
    public java.util.Collection<ExerciseState> TaskController.populateExerciseStates() {
        return Arrays.asList(ExerciseState.class.getEnumConstants());
    }
    
    @ModelAttribute("tasks")
    public java.util.Collection<Task> TaskController.populateTasks() {
        return Task.findAllTasks();
    }
    
    @ModelAttribute("tasktables")
    public java.util.Collection<TaskTable> TaskController.populateTaskTables() {
        return TaskTable.findAllTaskTables();
    }
    
    @RequestMapping(value = "/{id}", method = RequestMethod.GET, headers = "Accept=application/json")
    @ResponseBody
    public Object TaskController.showJson(@PathVariable("id") Long id) {
        Task task = Task.findTask(id);
        if (task == null) {
            return new ResponseEntity<String>(HttpStatus.NOT_FOUND);
        }
        return task.toJson();
    }
    
    @RequestMapping(headers = "Accept=application/json")
    @ResponseBody
    public String TaskController.listJson() {
        return Task.toJsonArray(Task.findAllTasks());
    }
    
    @RequestMapping(method = RequestMethod.POST, headers = "Accept=application/json")
    public org.springframework.http.ResponseEntity<String> TaskController.createFromJson(@RequestBody String json) {
        Task.fromJsonToTask(json).persist();
        return new ResponseEntity<String>(HttpStatus.CREATED);
    }
    
    @RequestMapping(value = "/jsonArray", method = RequestMethod.POST, headers = "Accept=application/json")
    public org.springframework.http.ResponseEntity<String> TaskController.createFromJsonArray(@RequestBody String json) {
        for (Task task: Task.fromJsonArrayToTasks(json)) {
            task.persist();
        }
        return new ResponseEntity<String>(HttpStatus.CREATED);
    }
    
    @RequestMapping(method = RequestMethod.PUT, headers = "Accept=application/json")
    public org.springframework.http.ResponseEntity<String> TaskController.updateFromJson(@RequestBody String json) {
        if (Task.fromJsonToTask(json).merge() == null) {
            return new ResponseEntity<String>(HttpStatus.NOT_FOUND);
        }
        return new ResponseEntity<String>(HttpStatus.OK);
    }
    
    @RequestMapping(value = "/jsonArray", method = RequestMethod.PUT, headers = "Accept=application/json")
    public org.springframework.http.ResponseEntity<String> TaskController.updateFromJsonArray(@RequestBody String json) {
        for (Task task: Task.fromJsonArrayToTasks(json)) {
            if (task.merge() == null) {
                return new ResponseEntity<String>(HttpStatus.NOT_FOUND);
            }
        }
        return new ResponseEntity<String>(HttpStatus.OK);
    }
    
    @RequestMapping(value = "/{id}", method = RequestMethod.DELETE, headers = "Accept=application/json")
    public org.springframework.http.ResponseEntity<String> TaskController.deleteFromJson(@PathVariable("id") Long id) {
        Task task = Task.findTask(id);
        if (task == null) {
            return new ResponseEntity<String>(HttpStatus.NOT_FOUND);
        }
        task.remove();
        return new ResponseEntity<String>(HttpStatus.OK);
    }
    
    @RequestMapping(params = "find=ByExerciseAndState", method = RequestMethod.GET, headers = "Accept=application/json")
    public String TaskController.jsonFindTasksByExerciseAndState(@RequestParam("exercise") Exercise exercise, @RequestParam("state") ExerciseState state) {
        return Task.toJsonArray(Task.findTasksByExerciseAndState(exercise, state).getResultList());
    }
    
    @RequestMapping(params = "find=ByState", method = RequestMethod.GET, headers = "Accept=application/json")
    public String TaskController.jsonFindTasksByState(@RequestParam("state") ExerciseState state) {
        return Task.toJsonArray(Task.findTasksByState(state).getResultList());
    }
    
    String TaskController.encodeUrlPathSegment(String pathSegment, HttpServletRequest httpServletRequest) {
        String enc = httpServletRequest.getCharacterEncoding();
        if (enc == null) {
            enc = WebUtils.DEFAULT_CHARACTER_ENCODING;
        }
        try {
            pathSegment = UriUtils.encodePathSegment(pathSegment, enc);
        }
        catch (UnsupportedEncodingException uee) {}
        return pathSegment;
    }
    
}
